var config = require('../config');
var debug = require('debug')('my-app:server');
var express = require('express');
var mongoose = require('mongoose');
var router = express.Router();
var ObjectId = mongoose.Types.ObjectId;
var User = require('../models/user');
var Issue = require('../models/issue');
var utils = require('./utils');


/* POST new issue */
// TEST OK
/**
 * @api {post} /issues Create an issue
 * @apiName CreateIssue
 * @apiGroup Issue
 * @apiVersion 1.0.0
 * @apiDescription Registers a new issue.
 *
 * @apiUse IssueInRequestBody
 * @apiUse IssueInResponseBody
 * @apiUse IssueValidationError
 * @apiSuccess (Response body) {String} id A unique identifier for the issue generated by the server
 *
 * @apiExample Example
 *     POST /issues HTTP/1.1
 *     Content-Type: application/json
 *
 *   * {
 *       "tags": [
 *           "broken",
 *           "lampe"
 *       ],
 *       "title": "Lampe problème",
 *       "description": "Une lampe cassée hier soir au carrefour du Mont.",
 *       "imageUrl": "C/:myimages/lampe",
 *       "latitude": 34.90437,
 *       "longitude": 25.92827,
 *       "creatorHref": "/users/5a968469babc74186ca57389"
 *     }
 *
 * @apiSuccessExample 201 Created
 *     HTTP/1.1 201 Created
 *     Content-Type: application/json
 *     Location: http://localhost:3000/issues/5ab37dce54a38c18641c878c
 *
 *     {
 *         "tags": [
 *             "broken",
 *             "lampe"
 *         ],
 *         "createdAt": "2018-03-22T09:56:30.277Z",
 *         "updatedAt": "2018-03-22T09:56:30.278Z",
 *         "title": "Lampe problème",
 *         "description": "Une lampe cassée hier soir au carrefour du Mont.",
 *         "imageUrl": "C/:myimages/lampe",
 *         "latitude": 34.90437,
 *         "longitude": 25.92827,
 *         "creatorHref": "/users/5a968469babc74186ca57389",
 *        "id": "5ab37dce54a38c18641c878c"
 *     }
 */
router.post('/', utils.requireJson, function(req, res, next) {
  new Issue(req.body).save(function(err, savedIssue) {
    if (err) {
      return next(err);
    }

    debug(`Created Issue "${savedIssue.title}"`);

    res
      .status(201)
      .set('Location', `${config.baseUrl}/issues/${savedIssue._id}`)
      .send(savedIssue);
  });
});


/* GET all issues */
// TEST OK
/**
 * @api {get} /issues List issues
 * @apiName RetrieveIssues
 * @apiGroup Issue
 * @apiVersion 1.0.0
 * @apiDescription Retrieves a paginated list of issues ordered by title (in alphabetical order).
 *
 * @apiUse IssueInResponseBody
 * @apiUse IssueIncludes
 * @apiUse Pagination
 *
 * @apiParam (URL query parameters) {String} [creator] Select only issues created by the person with the specified ID (this parameter can be given multiple times)
 * @apiExample Example
 *     GET /issues?creator=5a97b8d391930a14ec52d996 HTTP/1.1
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *     Link: &lt;http://http://localhost:3000/issues?creator=5a968469babc74186ca57389
 *
 */

router.get('/', function(req, res, next) {

  // Count total issues matching the URL query parameters
  const countQuery = queryIssues(req);
  countQuery.count(function(err, total) {
    if (err) {
      return next(err);
    }

    // Prepare the initial database query from the URL query parameters
    let query = queryIssues(req);

    // Paginate
    query = utils.paginate('/issues', query, total, req, res);

    // Populate the creator if indicated in the "include" URL query parameter
    if (utils.responseShouldInclude(req, 'creator')) {
      query = query.populate('creator');
    }

    // Execute the query
    query.sort({ title: 1 }).exec(function(err, issues) {
      if (err) {
        return next(err);
      }

      res.send(issues);
    });
  });
});


/* GET a specific issue */
// TEST OK
/**
 * @api {get} /issues/:id Retrieve an issue
 * @apiName RetrieveIssue
 * @apiGroup Issue
 * @apiVersion 1.0.0
 * @apiDescription Retrieves one Issue.
 *
 * @apiUse IssueIdInUrlPath
 * @apiUse IssueInResponseBody
 * @apiUse IssueIncludes
 * @apiUse IssueNotFoundError
 *
 * @apiExample Example
 *     GET /issues/5ab36818a77ed101f8269cd4 HTTP/1.1
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *     {
 *         "tags": [
 *             "broken",
 *             "lampe"
 *         ],
 *         "createdAt": "2018-03-22T09:56:30.277Z",
 *         "updatedAt": "2018-03-22T09:56:30.278Z",
 *         "title": "Lampe problème",
 *         "description": "Une lampe cassée hier soir au carrefour du Mont.",
 *         "imageUrl": "C/:myimages/lampe",
 *         "latitude": 34.90437,
 *         "longitude": 25.92827,
 *         "creatorHref": "/users/5a968469babc74186ca57389",
 *        "id": "5ab37dce54a38c18641c878c"
 *     }
 */
router.get('/:id', loadIssueFromParamsMiddleware, function(req, res, next) {
  res.send(req.issue);
});

/* UPDATE partially a specific Issue */
// TEST OK
/**
 * @api {patch} /users/:id Partially update an issue
 * @apiName PartiallyUpdateIssue
 * @apiGroup Issue
 * @apiVersion 1.0.0
 * @apiDescription Partially updates an issue's data (only the properties found in the request body will be updated).
 * All properties are optional.
 *
 * @apiUse IssueIdInUrlPath
 * @apiUse IssueInRequestBody
 * @apiUse IssueInResponseBody
 * @apiUse IssueNotFoundError
 * @apiUse IssueValidationError
 *
 * @apiExample Example
 *     PATCH /api/movies/58b2926f5e1def0123e97281 HTTP/1.1
 *     Content-Type: application/json
 *
 *     {
 *         "latitude": 38.90437,
 *         "longitude": 27.92827
 *     }
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *     {
 *         "tags": [
 *             "broken",
 *             "lampe"
 *         ],
 *         "createdAt": "2018-03-22T09:56:30.277Z",
 *         "updatedAt": "2018-03-22T09:56:30.278Z",
 *         "title": "Lampe problème",
 *         "description": "Une lampe cassée hier soir au carrefour du Mont.",
 *         "imageUrl": "C/:myimages/lampe",
 *         "latitude": 38.90437,
 *         "longitude": 27.92827,
 *         "creatorHref": "/users/5a968469babc74186ca57389",
 *        "id": "5ab37dce54a38c18641c878c"
 *     }
 */
router.patch('/:id', utils.requireJson, loadIssueFromParamsMiddleware, function(req, res, next) {

  // Update only properties present in the request body
  if (req.body.title !== undefined) {
    req.issue.title = req.body.title;
  }
  if (req.body.updated !== undefined) {
    req.issue.updated = req.body.updated;
  }
  if (req.body.description !== undefined) {
    req.issue.description = req.body.description;
  }
  if (req.body.statement !== undefined) {
    req.issue.statement = req.body.statement;
  }
  if (req.body.importance !== undefined) {
    req.issue.importance = req.body.importance;
  }

  req.issue.save(function(err, savedIssue) {
    if (err) {
      return next(err);
    }

    debug(`Updated issue "${savedIssue.title}"`);
    res.send(savedIssue);
  });
});


/* UPDATE specific Issue */
// TEST OK
/**
 * @api {patch} /users/:id update an issue
 * @apiName UpdateIssue
 * @apiGroup Issue
 * @apiVersion 1.0.0
 * @apiDescription Updates all the data issue.
 *
 * @apiUse IssueIdInUrlPath
 * @apiUse IssueInRequestBody
 * @apiUse IssueInResponseBody
 * @apiUse IssueNotFoundError
 * @apiUse IssueValidationError
 *
 * @apiExample Example
 *     PATCH /api/movies/58b2926f5e1def0123e97281 HTTP/1.1
 *     Content-Type: application/json
 *
 *     {
 *         "tags": [
 *             "caput",
 *             "miroir"
 *         ],
 *         "title": "miroir cassé",
 *         "description": "Un miroir cassé dans la rue.",
 *         "imageUrl": "C/:myimages/miroir",
 *         "latitude": 48.90437,
 *         "longitude": 67.92827,
 *         "creatorHref": "/users/5a968469babc74186ca57389"
 *     }
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *     {
 *         "tags": [
 *             "caput",
 *             "miroir"
 *         ],
 *         "createdAt": "2018-03-22T09:56:30.277Z",
 *         "updatedAt": "2018-03-22T09:56:30.278Z",
 *         "title": "miroir cassé",
 *         "description": "Un miroir cassé dans la rue.",
 *         "imageUrl": "C/:myimages/miroir",
 *         "latitude": 48.90437,
 *         "longitude": 67.92827,
 *         "creatorHref": "/users/5a968469babc74186ca57389",
 *         "id": "5ab37dce54a38c18641c878c"
 *     }
 */
router.patch('/:id', utils.requireJson, loadIssueFromParamsMiddleware, function(req, res, next) {

  // Update all properties present in the request body
 
  req.issue.title = req.body.title;
  req.issue.updated = req.body.updated;
  req.issue.description = req.body.description;
  req.issue.statement = req.body.statement;
  req.issue.importance = req.body.importance;

  req.issue.save(function(err, savedIssue) {
    if (err) {
      return next(err);
    }

    debug(`Updated issue "${savedIssue.title}"`);
    res.send(savedIssue);
  });
});

/* DELETE specific Issue */
// TSET OK
/**
 * @api {delete} /users/:id Delete an issue
 * @apiName DeleteIssue
 * @apiGroup Issue
 * @apiVersion 1.0.0
 * @apiDescription Permanently deletes an issue.
 *
 * @apiUse IssueIdInUrlPath
 * @apiUse IssueNotFoundError
 *
 * @apiExample Example
 *     DELETE /issues/5ab37dce54a38c18641c878c HTTP/1.1
 *
 * @apiSuccessExample 204 No Content
 *     HTTP/1.1 204 No Content
 */
router.delete('/:id', loadIssueFromParamsMiddleware, function(req, res, next) {
  req.issue.remove(function(err) {
    if (err) {
      return next(err);
    }

    debug(`Deleted issue "${req.issue.title}"`);
    res.sendStatus(204);
  });
});


// FONCTIONS

/**
 * Returns a Mongoose query that will retrieve issues filtered with the URL query parameters.
 */
function queryIssues(req) {

  let query = Issue.find();

  if (Array.isArray(req.query.creator)) {
    const creators = req.query.creator.filter(ObjectId.isValid);
    query = query.where('creator').in(creators);
  } else if (ObjectId.isValid(req.query.creator)) {
    query = query.where('creator').equals(req.query.creator);
  }

  // filter pour recherche d'une issue selon son etat
  if (typeof(req.query.statement) == 'string') {
    query = query.where('statement').equals(req.query.statement);
  }


  return query;
}

/**
 * Middleware that loads the issue corresponding to the ID in the URL path.
 * Responds with 404 Not Found if the ID is not valid or the issue doesn't exist.
 */
function loadIssueFromParamsMiddleware(req, res, next) {

  const issueId = req.params.id;
  if (!ObjectId.isValid(issueId)) {
    return issueNotFound(res, issueId);
  }

  let query = Issue.findById(issueId)

  // Populate the creator if indicated in the "include" URL query parameter
  if (utils.responseShouldInclude(req, 'creator')) {
    query = query.populate('creator');
  }

  query.exec(function(err, issue) {
    if (err) {
      return next(err);
    } else if (!issue) {
      return issueNotFound(res, issueId);
    }

    req.issue = issue;
    next();
  });
}

/**
 * Responds with 404 Not Found and a message indicating that the issue with the specified ID was not found.
 */
function issueNotFound(res, issueId) {
  return res.status(404).type('text').send(`No issue found with ID ${issueId}`);
}

/**
 * @apiDefine IssueIdInUrlPath
 * @apiParam (URL path parameters) {String} id The unique identifier of the issue to retrieve
 */

/**
 * @apiDefine IssueInRequestBody
 * @apiParam (Request body) {String} creatorHref A hyperlink reference to the user who created the issue.
 */

/**
 * @apiDefine IssueInResponseBody
 * @apiSuccess (Response body) {String} id The unique identifier of the issue
 * @apiSuccess (Response body) {String} creatorHref A hyperlink reference to the creator who createdd the issue
 * @apiSuccess (Response body) {String} createdAt The date at which the issue was registered
 */

/**
 * @apiDefine IssueIncludes
 * @apiParam (URL query parameters) {String} [include] Embed linked resources in the response body:
 * * `"creator"` for the issue's creator
 */

/**
 * @apiDefine IssueNotFoundError
 *
 * @apiError {Object} 404/NotFound No issue was found corresponding to the ID in the URL path
 *
 * @apiErrorExample {json} 404 Not Found
 *     HTTP/1.1 404 Not Found
 *     Content-Type: text/plain
 *
 *     No issue found with ID 5ab36818a77ed101f8269cd4
 */

/**
 * @apiDefine IssueValidationError
 *
 * @apiError {Object} 422/UnprocessableEntity Some of the issue's properties are invalid
 *
 * @apiErrorExample {json} 422 Unprocessable Entity
 *     HTTP/1.1 422 Unprocessable Entity
 *     Content-Type: application/json
 *
 *     {
 *       "message": "Issue validation failed",
 *       "errors": {
 *         "title": {
 *           "kind": "minlength",
 *           "message": "title is too short",
 *           "name": "ValidatorError",
 *           "path": "title",
 *         }
 *       }
 *     }
 */


module.exports = router;